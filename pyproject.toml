[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "atous-sec-network"
version = "2.0.0"
description = "Atous Secure Network - Enhanced IoT Security with Federated Learning and LoRa"
authors = [
    {name = "Atous Team", email = "dev@atous.tech"}
]
readme = "README.md"
requires-python = ">=3.8"
dependencies = [
    "numpy>=1.21.0",
    "torch>=1.9.0",
    "transformers>=4.11.0",
    "flwr>=1.0.0",
    "scikit-learn>=1.0.0",
    "pandas>=1.3.0",
    "paho-mqtt>=1.6.0",
    "requests>=2.26.0",
    "cryptography>=3.4.0",
    "prometheus-client>=0.11.0",
    "psutil>=5.8.0",
    "dash>=2.0.0",
    "plotly>=5.0.0",
    "bsdiff4>=0.2.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=6.2.0",
    "pytest-asyncio>=0.15.0",
    "pytest-cov>=2.12.0",
    "pytest-mock>=3.6.0",
    "black>=21.7b0",
    "flake8>=3.9.0",
    "mypy>=0.910"
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=atous_sec_network",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests"
]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.coverage.run]
source = ["atous_sec_network"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]